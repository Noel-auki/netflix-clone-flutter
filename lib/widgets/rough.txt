import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:youtube_player_iframe/youtube_player_iframe.dart';
import 'package:screen_brightness/screen_brightness.dart';
import 'package:volume_control/volume_control.dart';

class FullScreenVideoPlayer extends StatefulWidget {
  final String videoId;
  const FullScreenVideoPlayer({
    Key? key,
    required this.videoId,
  }) : super(key: key);

  @override
  _FullScreenVideoPlayerState createState() => _FullScreenVideoPlayerState();
}

class _FullScreenVideoPlayerState extends State<FullScreenVideoPlayer> {
  late YoutubePlayerController _youtubeController;
  bool _isPlaying = false;
  double _currentSliderValue = 0.0;
  Duration _videoDuration = Duration.zero;
  double _brightness = 0.5;
  double _volume = 0.5;
  double _initialBrightness = 0.5;
  double _initialVolume = 0.5;

  @override
  void initState() {
    super.initState();

    // Set the preferred orientations to landscape only
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.landscapeRight,
      DeviceOrientation.landscapeLeft,
    ]);

    _youtubeController = YoutubePlayerController(
      initialVideoId: widget.videoId,
      params: const YoutubePlayerParams(
        autoPlay: true,
        mute: false,
        showControls: false, // Hide default controls
        showFullscreenButton: false,
        showVideoAnnotations: false,
        strictRelatedVideos: false,
      ),
    );

    _youtubeController.listen((event) {
      if (event.playerState == PlayerState.playing) {
        setState(() {
          _isPlaying = true;
          _videoDuration = event.metaData.duration;
        });
      } else {
        setState(() {
          _isPlaying = false;
        });
      }

      if (event.playerState != PlayerState.buffering) {
        setState(() {
          _currentSliderValue = event.position.inSeconds.toDouble();
        });
      }
    });

    // Initialize brightness and volume
    _initializeBrightnessAndVolume();
  }

  void _initializeBrightnessAndVolume() async {
    _initialBrightness = await ScreenBrightness().current;
    _initialVolume = await VolumeControl.volume;
    setState(() {
      _brightness = _initialBrightness;
      _volume = _initialVolume;
    });
  }

  void _togglePlayPause() {
    setState(() {
      if (_isPlaying) {
        _youtubeController.pause();
      } else {
        _youtubeController.play();
      }
      _isPlaying = !_isPlaying;
    });
  }

  void _rewind10Seconds() {
    _youtubeController.seekTo(
        Duration(seconds: _youtubeController.value.position.inSeconds - 10));
  }

  void _forward10Seconds() {
    _youtubeController.seekTo(
        Duration(seconds: _youtubeController.value.position.inSeconds + 10));
  }

  @override
  void dispose() {
    // Revert to the default orientation settings and brightness
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
      DeviceOrientation.landscapeRight,
      DeviceOrientation.landscapeLeft,
    ]);

    ScreenBrightness().setScreenBrightness(_initialBrightness);
    VolumeControl.setVolume(_initialVolume);
    _youtubeController.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Stack(
          fit: StackFit.expand,
          children: [
            YoutubePlayerIFrame(
              controller: _youtubeController,
              aspectRatio: 16 / 9,
            ),
            // Back button at the top left
            Positioned(
              top: 16,
              left: 16,
              child: IconButton(
                icon: Icon(
                  Icons.arrow_back,
                  color: Colors.white,
                  size: 30,
                ),
                onPressed: () {
                  Navigator.of(context).pop();
                },
              ),
            ),
            // Container for control buttons
            Positioned(
              left: 0,
              right: 0,
              bottom: 50,
              top: 0,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  IconButton(
                    icon: Icon(
                      Icons.replay_10,
                      color: Colors.white,
                      size: 60,
                    ),
                    onPressed: _rewind10Seconds,
                  ),
                  IconButton(
                    icon: Icon(
                      _isPlaying ? Icons.pause : Icons.play_arrow,
                      color: Colors.white,
                      size: 60,
                    ),
                    onPressed: _togglePlayPause,
                  ),
                  IconButton(
                    icon: Icon(
                      Icons.forward_10,
                      color: Colors.white,
                      size: 60,
                    ),
                    onPressed: _forward10Seconds,
                  ),
                ],
              ),
            ),
            // Slider for video progress
            Positioned(
              left: 0,
              right: 0,
              bottom: 20,
              child: Slider(
                value: _currentSliderValue,
                min: 0,
                max: _videoDuration.inSeconds.toDouble() + 2,
                activeColor: Colors.red[900],
                inactiveColor: Colors.grey,
                onChanged: (value) {
                  setState(() {
                    _currentSliderValue = value;
                  });
                  _youtubeController.seekTo(Duration(seconds: value.toInt()));
                },
              ),
            ),
            // Brightness control on the left
            Positioned(
              left: 20,
              bottom: MediaQuery.of(context).size.height * 0.20,
              top: MediaQuery.of(context).size.height * 0.25,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.light_mode_outlined,
                    color: Colors.white,
                    size: 30,
                  ),
                  RotatedBox(
                    quarterTurns: 3,
                    child: SliderTheme(
                      data: SliderTheme.of(context).copyWith(
                        thumbShape: SliderComponentShape.noThumb,
                      ),
                      child: Slider(
                        value: _brightness,
                        min: 0,
                        max: 1,
                        activeColor: Colors.white,
                        inactiveColor: Colors.grey,
                        onChanged: (value) {
                          setState(() {
                            _brightness = value;
                            ScreenBrightness().setScreenBrightness(value);
                          });
                        },
                      ),
                    ),
                  ),
                ],
              ),
            ),
            // Volume control on the right
            Positioned(
              right: 20,
              bottom: MediaQuery.of(context).size.height * 0.20,
              top: MediaQuery.of(context).size.height * 0.25,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.volume_up,
                    color: Colors.white,
                    size: 30,
                  ),
                  RotatedBox(
                    quarterTurns: 3,
                    child: SliderTheme(
                      data: SliderTheme.of(context).copyWith(
                        thumbShape: SliderComponentShape.noThumb,
                      ),
                      child: Slider(
                        value: _volume,
                        min: 0,
                        max: 1,
                        activeColor: Colors.white,
                        inactiveColor: Colors.grey,
                        onChanged: (value) {
                          setState(() {
                            _volume = value;
                            VolumeControl.setVolume(value);
                          });
                        },
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
